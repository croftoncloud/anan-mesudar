AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for creating a VPC with public and private subnets, NAT Gateway, and VPC Flow Logs'
############################################################################################################
# Meets Security Hub requirements for use with Lambda, EC2, and Cloud9 Services.
############################################################################################################

Parameters:
  workloadPrefix:
    Type: String
    Default: 'workload'
    Description: 'Prefix for the workload name'
  enableAutomaticIPAssignment:
    Type: String
    Default: 'false'
    Description: 'Enable automatic IP assignment for public subnets by changing to true'
  LogGroupRetentionInDays:
    Type: Number
    Default: 365
    Description: 'Number of days to retain the flow logs in CloudWatch Logs'
  CIDRBlock:
    Type: String
    Default: '10.200.0.0/21'

Conditions:
  EnableAutomaticIPAssignment: !Equals [!Ref enableAutomaticIPAssignment, 'true']

Resources:
  WorkloadVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDRBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref workloadPrefix
              - !Ref AWS::AccountId
              - !Ref AWS::Region
              - 'VPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref workloadPrefix
              - 'IGW'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WorkloadVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: This subnet defaults to secure, but can be overridden by the user
    Properties:
      VpcId: !Ref WorkloadVPC
      CidrBlock: '10.200.0.0/23'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: !If [EnableAutomaticIPAssignment, true, false]
      Tags:
        - Key: Name
          Value:
            'Fn::Join': ['-', [!Ref workloadPrefix, 'PublicSubnet1']]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: This subnet defaults to secure, but can be overridden by the user
    Properties:
      VpcId: !Ref WorkloadVPC
      CidrBlock: '10.200.2.0/23'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: !If [EnableAutomaticIPAssignment, true, false]
      Tags:
        - Key: Name
          Value:
            'Fn::Join': ['-', [!Ref workloadPrefix, 'PublicSubnet2']]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WorkloadVPC
      CidrBlock: '10.200.4.0/23'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            'Fn::Join': ['-', [!Ref workloadPrefix, 'PrivateSubnet1']]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WorkloadVPC
      CidrBlock: '10.200.6.0/23'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            'Fn::Join': ['-', [!Ref workloadPrefix, 'PrivateSubnet2']]

  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachGateway
    Properties:
      AllocationId: !GetAtt 'EIP1.AllocationId'
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value:
            'Fn::Join': ['-', [!Ref workloadPrefix, 'NATGateway']]

  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value:
            'Fn::Join': ['-', [ !Ref workloadPrefix, 'EIP1']]

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WorkloadVPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join': 
              - '-'
              - - !Ref workloadPrefix
                - 'PrivateRouteTable1'

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WorkloadVPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - !Ref workloadPrefix
                - 'PrivateRouteTable2'

  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref WorkloadVPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - !Ref workloadPrefix
                - 'PublicRouteTable1'

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref WorkloadVPC
      Tags:
        - Key: Name
          Value:
            'Fn::Join':
              - '-'
              - - !Ref workloadPrefix
                - 'PublicRouteTable2'

  PublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  FlowLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: Will evaluate the use of encryption in a future iteration
    Properties:
      LogGroupClass: 'STANDARD'
      LogGroupName: !Sub '/ec2/vpc/${WorkloadVPC}-${workloadPrefix}'
      RetentionInDays: !Ref LogGroupRetentionInDays

  FlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FlowLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt FlowLogGroup.Arn

  FlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref FlowLogGroup
      ResourceId: !Ref WorkloadVPC
      ResourceType: VPC
      TrafficType: ALL

  PrivateSubnet2IdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${workloadPrefix}/private-subnet-2-id'
      Description: !Sub '${workloadPrefix} Private Subnet 2 Id'
      Type: String
      Value: !Ref PrivateSubnet2

Outputs:
  VPCId:
    Description: 'VPC Id'
    Value: !Ref WorkloadVPC
  PublicSubnet1Id:
    Description: 'Public Subnet 1 Id'
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Description: 'Public Subnet 2 Id'
    Value: !Ref PublicSubnet2
  PrivateSubnet1Id:
    Description: 'Private Subnet 1 Id'
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: 'Private Subnet 2 Id'
    Value: !Ref PrivateSubnet2
  FlowLogGroup:
    Description: 'Flow Log Group'
    Value: !Ref FlowLogGroup
  FlowLogRole:
    Description: 'Flow Log Role'
    Value: !Ref FlowLogRole
  FlowLog:
    Description: 'Flow Log'
    Value: !Ref FlowLog
