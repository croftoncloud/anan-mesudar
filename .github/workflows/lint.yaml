name: Code Linting

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
  # pull_request:
  #   branches: [ main ]

jobs:
  cfn-lint:
    name: Run cfn-lint
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      discussions: write
      contents: read

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 3: Install cfn-lint
      - name: Install cfn-lint
        run: |
          python -m pip install --upgrade pip
          pip install cfn-lint

      # Step 4: Run cfn-lint on all YAML files
      - name: Run cfn-lint
        id: run_cfn_lint
        run: |
          cfn-lint cloudformation/**/*.yaml > cfn_lint_results.txt 2>&1 || true
          echo "results=$(cat cfn_lint_results.txt)" >> $GITHUB_ENV

      # Step 5: Post results to the Pull Request
      - name: Comment on Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const lintResults = process.env.results;
            const body = `## cfn-lint Results\n\`\`\`\n${lintResults}\n\`\`\``;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body,
            });

  # cfn-nag:
  #   name: Run cfn-nag scan
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: read
  #     contents: read
  #     pull-requests: write
  #     security-events: write
  #   needs: cfn-lint

  #   steps:
  #     # Step 1: Check out the repository
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     # Step 2: Install dependencies
  #     - name: Install Ruby and cfn-nag
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y ruby-full build-essential
  #         gem install cfn-nag

  #     # Step 3: Run cfn-nag
  #     - name: Run cfn-nag scan
  #       id: cfn_nag_step
  #       run: |
  #         cfn_nag_scan --input-path cloudformation --output-format txt 2>&1 $GITHUB_OUTPUT
  #       continue-on-error: true

  #     # Step 4: Post results to PR
  #     - name: Comment on Pull Request
  #       if: always()
  #       uses: actions/github-script@v6
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const result = `## cfn-nag Results\n\`\`\`\n${steps['cfn_nag_step'].outputs.*}\n\`\`\``;
  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: result,
  #           });

  # pylint:
  #   name: Run Pylint on Python files
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: read
  #     contents: read
  #     pull-requests: write

  #   steps:
  #     # Step 1: Check out the repository
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     # Step 2: Set up Python
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.x'

  #     # Step 3: Install Pylint
  #     - name: Install Pylint
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install pylint

  #     # Step 4: Run Pylint
  #     - name: Run Pylint on all Python files
  #       id: pylint_step
  #       run: |
  #         pylint *.py 2>&1 $GITHUB_OUTPUT
  #         pylint modules/**/*.py 2>&1 $GITHUB_OUTPUT
  #       continue-on-error: true

  #     # Step 5: Post results to PR
  #     - name: Comment on Pull Request
  #       if: always()
  #       uses: actions/github-script@v6
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const result = `## Pylint Results\n\`\`\`\n${steps['pylint_step'].outputs.*}\n\`\`\``;
  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: result,
  #           });
