name: Code Linting

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ main ]

jobs:
  cfn-lint:
    name: Run cfn-lint scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      pull-requests: write
      security-events: write

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 3: Install cfn-lint
      - name: Install cfn-lint
        run: |
          python -m pip install --upgrade pip
          pip install cfn-lint

      # Step 4: Run cfn-lint
      - name: Lint CloudFormation templates
        id: cfn_lint_step
        run: |
          cfn-lint cloudformation/**/*.yaml || cfn-lint cloudformation/**/*.yml
        continue-on-error: true

      # Step 5: Post results to PR
      - name: Comment on Pull Request
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = `## cfn-lint Results\n\`\`\`\n${steps['cfn_lint_step'].outputs.result}\n\`\`\``;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: result,
            });

  cfn-nag:
    name: Run cfn-nag scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      pull-requests: write
      security-events: write
    needs: cfn-lint

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install dependencies
      - name: Install Ruby and cfn-nag
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby-full build-essential
          gem install cfn-nag

      # Step 3: Run cfn-nag
      - name: Run cfn-nag scan
        id: cfn_nag_step
        run: |
          cfn_nag_scan --input-path cloudformation
        continue-on-error: true

      # Step 4: Post results to PR
      - name: Comment on Pull Request
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = `## cfn-nag Results\n\`\`\`\n${steps['cfn_nag_step'].outputs.result}\n\`\`\``;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: result,
            });

  pylint:
    name: Run Pylint on Python files
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      pull-requests: write

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 3: Install Pylint
      - name: Install Pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      # Step 4: Run Pylint
      - name: Run Pylint on all Python files
        id: pylint_step
        run: |
          pylint *.py || pylint modules/**/*.py
        continue-on-error: true

      # Step 5: Post results to PR
      - name: Comment on Pull Request
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = `## Pylint Results\n\`\`\`\n${steps['pylint_step'].outputs.result}\n\`\`\``;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: result,
            });
